summary(eval$score)
summary(evals$score)
evals
evals$score
evals$score <= 3
evals[evals$score <= 3,]
evals[evals$score < 3,]
names(evals)
plot(evals$score ~ evals$age + evals$bty_avg + evals$rank)
plot(evals$score ~ evals$bty_avg)
?jitter
plot(evals$score ~ jitter(evals$bty_avg)
)
plot(jitter(evals$score) ~ evals$bty_avg)
lm_bty <- lm(evals$score ~ evals$vty_avg)
lm_bty <- lm(evals$score, evals$vty_avg)
?lm
lm_bty <- lm(evals$score ~ evals$vty_avg)
lm_bty <- lm(evals$score ~ evals$bty_avg)
summary(lm_bty)
plot(lm_bty$residuals ~ evals$bty_avg)
hist(lm_bty$residuals)
qqnorm(lm_bty$residuals)
qqline(lm_bty$residuals)
cor(evals$score, evals$bty_avg)
0.1871424*0.1871424
plot(evals$bty_avg ~
evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[, 13:19])
m_bty_gen <- lm(score ~
bty_avg + gender, data = evals)
summary(m_bty_gen)
plot(m_bty_gen$residuals ~ evals$gender)
plot(m_bty_gen$residuals ~ evals$bty_avg)
hist(m_bty_gen$residuals)
qqnorm(m_bty_gen$residuals)
qqline(m_bty_gen$residuals)
multiLines(m_bty_gen)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
multiLines(m_bty_rank)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m1 <- lm(score ~
ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)$adj.r.squared
m2 <- lm(score ~
rank +  gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m2)$adj.r.squared
m3 <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits , data = evals)
summary(m3)$adj.r.squared
m4 <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m4)$adj.r.squared
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+  cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m_full <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
m5 <- lm(score ~
rank + ethnicity + gender + language + age + cls_perc_eval
+  cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m5)$adj.r.squared
sum(dbinom(4:20,20,0.1))
dbinom(1,5,0.2)
dbinom(2,10,0.1)
dbinom(2,10,0.2)
dbinom(3,15,0.1)
dbinom(3,15,0.2)
pf(3.47,2,830, lower.tail=FALSE)
install.packages("KernSmooth")
library("KernSmooth")
a <- available.packages()
a
head(rownames(a),3)
head(rownames(a),4)
install.packages('slidify')
install.packages('KernSmooth')
library(KernSmooth)
install.package("swirl")
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5+7
x
y <- x-3
y
c(1.1,9 , 3.14)
z <- c(1.1,9 , 3.14)
?c
z
c(z,555,z)
z* 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z* 2 + 1000
my
my_div
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times= 40)
req(c(0, 1, 2),times = 10)
rep(c(0, 1, 2),times = 10)
rep(c(0,1,2) , each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "gchaleunsinh")
my_name
paste(my_name, collapse = " ")
paste("Hello", "word!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
info()
NaN
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf =NA)
vect
names(vect)
vect2 <- c(11, 2 , NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
str(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
swirl()
quit()
setwd("D:/MOOC/coursera - Getting and Cleaning Data/project")
list.files()
getwd()
if ( !file.exists("../data")) {
dir.create("../data")
}
file_url <- ("http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip")
download.file(file_url,destfile="../data/getdata-projectfiles-UCI HAR Dataset.zip")
unzip("../data/getdata-projectfiles-UCI HAR Dataset.zip")
dftestX <- read.table("../data/UCI HAR Dataset/test/x_test.txt")
dftrainX <- read.table("../data/UCI HAR Dataset/train/x_train.txt")
list.files("../data")
unzip("../data/getdata-projectfiles-UCI\ HAR Dataset.zip")
unzip("../data/getdata-projectfiles-UCI\ HAR Dataset.zip")
unzip("../data/*.zip")
?unzip
unzip("../data/")
unzip("../data/getdata-projectfiles-UCI\ HAR\ Dataset.zip")
unzip("../data/getdata-projectfiles-UCI\ HAR\ Dataset.zip")
ls.files(pattern="../data/*Dataset.zip")
list.files(pattern="../data/*Dataset.zip")
list.files(pattern="\.\.\/data\/*Dataset.zip")
unzip("..\\data\\getdata-projectfiles-UCI HAR Dataset.zip")
?file.chose
?file
?file.chose
current_wd <- getwd()
setwd("../data")
getwd()
unzip("getdata-projectfiles-UCI HAR Dataset.zip")
setwd(current_wd)
getwd()
setwd("D:/MOOC/coursera - Getting and Cleaning Data/GettingCleaningDataCoursera")
if ( !file.exists("../data")) {
dir.create("../data")
}
# download file
file_url <- ("http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip")
download.file(file_url,destfile="../data/getdata-projectfiles-UCI HAR Dataset.zip")
getwd()
# unzip file
current_wd <- getwd()
setwd("../data")
unzip("getdata-projectfiles-UCI HAR Dataset.zip")
setwd(current_wd)
dftestX <- read.table("../data/UCI HAR Dataset/test/x_test.txt")
dftrainX <- read.table("../data/UCI HAR Dataset/train/x_train.txt")
dim(dftrainX)
dim(dftestX)
# appending rows
DFX <- rbind(dftrainX,dftestX)
dim(DFX)
features<-  read.table("UCI HAR Dataset/features.txt")
features<-  read.table("../data/UCI HAR Dataset/features.txt")
v_features <- as.character(features[["V2"]])
features<-  read.table("../data/UCI HAR Dataset/features.txt")
dim(features)
head(features)
str(features)
?read.table
features<-  read.table("../data/UCI HAR Dataset/features.txt",
stringsAsFActors == FALSE)
features<-  read.table("../data/UCI HAR Dataset/features.txt",
stringsAsFactors == FALSE)
features<-  read.table("../data/UCI HAR Dataset/features.txt",
stringsAsFactors = FALSE)
str(features)
v_features_ms <- grep("\\b-mean()|\\b-std()",v_features)
v_features_ms
v_features_ms <- grep("\\b-mean()|\\b-std()",features)
v_features_Ms
v_features_ms
v_features <- as.character(features[["V2"]]
)
v_features
v_features_ms <- grep("\\b-mean()|\\b-std()",v_features)
v_features_ms
features
features[["V2"]]
v_features
v_features_ms
v_features_ms <- grep("\\b-mean()|\\b-std()",features[["V2"]])
v_features_ms
DFX1_sm <-DFX[,grep("\\b-mean()|\\b-std()",features[["V2"]])]
DFX1_sm
v_features_ms
dftestY <- read.table("../data/UCI HAR Dataset/test/y_test.txt")
dftrainY <- read.table("../data/UCI HAR Dataset/train/y_train.txt")
dim(dftestY)
dim(dftrainY)
# appending rows
DFY <- rbind(dftrainY,dftestY)
dim(DFY)
# append column activity to DFX
DFXY <- cbind(DFX1_sm,DFY)
dim(DFXY)
DFXY[,67]
head(DFXY)
dim(DFXY)
str(DFXY)
features
v_features_ms
features(grep("\\b-mean()|\\b-std()",features[["V2"]]))
features[grep("\\b-mean()|\\b-std()",features[["V2"]])]
features[grep("\\b-mean()|\\b-std()",features$V2)]
features[grep("\\b-mean()|\\b-std()",features$V2),]
features[grep("\\b-mean()\\b|-std()",features$V2),]
v_features_ms <- grep("\\b-mean()\\b|-std()",features[["V2"]])
dim(v_features_ms)
length(v_featurs_Ms)
length(v_featurs_ms)
length(v_features_ms)
features[grep("\\b-mean()\\b|-std()",features$V2),]
dim(features[grep("\\b-mean()\\b|-std()",features$V2),])
DFX1_sm <-DFX[,grep("\\b-mean()\\b|-std()",features[["V2"]])]
dftestY <- read.table("../data/UCI HAR Dataset/test/y_test.txt")
dftrainY <- read.table("../data/UCI HAR Dataset/train/y_train.txt")
# appending rows
DFY <- rbind(dftrainY,dftestY)
# append column activity to DFX
DFXY <- cbind(DFX1_sm,DFY)
dim(DFXY)
names(DFXY)[67] <- "activity"
activity_labels <- read.table("../data/UCI HAR Dataset/activity_labels.txt",
stringsAsFactor = FALSE)
activity_name <- function(x) {
re <- activity_labels[x,2]
return(re)
}
DFXY1 <- transform(DFXY, activity = activity_name(activity))
DFXY
DFXY1
v_features_ms <- features[grep("\\b-mean()\\b|-std()",features[["V2"]])]
dim(features)
v_features <- features[["V2"]]
dim(features)
dim(features[["V2"]])
length(features[["V2"]])
dim(v_features)
v_features <- features[["V2"]]
length(v_features)
st(v_features)
str(v_features)
class(v_features)
v_features_ms <- features[grep("\\b-mean()\\b|-std()",v_features)]
features[grep("\\b-mean()\\b|-std()",features$V2),]
features[grep("\\b-mean()\\b|-std()",features$V2),][2]
t <- features[grep("\\b-mean()\\b|-std()",features$V2),][2]
length(t)
t
t <- features[grep("\\b-mean()\\b|-std()",features$V2),][[2]]
t
v_features_ms <- v_features[grep("\\b-mean()\\b|-std()",v_features)]
length(v_features_ms)
v_features_ms
v_features_msa <- (append(v_features_ms,'activity'))
v_features_msa
DFXY1
head(DFXY1)
names(DFXY1)
DFXY1 <- setNames (DFXY1, v_features_ms)
names(DFXY1)
DFXY1 <- setNames (DFXY1, v_features_msa)
names(DFXY1)
write.table(DFXY1,
file = "tidydata1",
sep = ",",
col.names = colnames(DFXY))
write.table(DFXY1,
file = "tidydata1",
sep = ",",
col.names = colnames(DFXY1))
write.table(DFXY1,
file = "tidydata1.txt",
sep = ",",
col.names = colnames(DFXY1))
titi <- read.table("tidydata1.txt", sep=",", header=true, stringsAsFactors= true)
titi <- read.table("tidydata1.txt", sep=",", header=TRUE, stringsAsFactors= TRUE)
all(titi == DFXY1)
remove(titi)
dftestU <- read.table("../data/UCI HAR Dataset/test/subject_test.txt")
dftrainU <- read.table("../data/UCI HAR Dataset/train/subject_train.txt")
DFU <- rbind(dftrainU,dftestU)
dim(DFU)
# append column User to DFX
DFXYU <- cbind(DFU,DFXY1)
names(DFXYU)[1] <- "volunteers"
dim(DFXYU)
DFXYU1 <- aggregate(DFXYU[2:67],
by = DFXYU[c("volunteers","activity")],
FUN = mean)
DFXYU1_volunteers <- DFXYU1[order(DFXYU1$volunteers),]
head(DFXYU1_volunteers, n = 100)
head(DFXYU1_volunteers, n = 10)
write.table(DFXYU1_volunteers,
file = "tidydata2.txt",
sep = ",",
col.names = colnames(DFXYU1_volunteers))
str(DFXYU1_volunteers)
print(DFXYU1_volunteers)
head(DFXYU1_volunteers)
head(DFXYU1_volunteers , n = 15)
dim(DFX1_sm)
write.table(DFXYU1_volunteers,
file = "tidydata.txt",
sep = ",",
col.names = colnames(DFXYU1_volunteers))
write.table(DFXYU1_volunteers,
file = "../data/tidydata.txt",
sep = ",",
col.names = colnames(DFXYU1_volunteers))
write.table(DFXYU1_volunteers,
file = "tidydata.txt",
sep = ",",
col.names = colnames(DFXYU1_volunteers))
getwd()
source('D:/MOOC/coursera - Getting and Cleaning Data/GettingCleaningDataCoursera/run_analysis.R')
getwd()
## 1. Merges the training and the test sets to create one data set.
# create data dir
if ( !file.exists("../data")) {
dir.create("../data")
}
# download file
file_url <- ("http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip")
download.file(file_url,destfile="../data/getdata-projectfiles-UCI HAR Dataset.zip")
# unzip file
current_wd <- getwd()
setwd("../data")
unzip("getdata-projectfiles-UCI HAR Dataset.zip")
setwd(current_wd)
# X
dftestX <- read.table("../data/UCI HAR Dataset/test/x_test.txt")
dftrainX <- read.table("../data/UCI HAR Dataset/train/x_train.txt")
# appending rows
DFX <- rbind(dftrainX,dftestX)
# read features.txt to vectors
# names dftest and dftrain
# extract features to vectors
features<-  read.table("../data/UCI HAR Dataset/features.txt",
stringsAsFactors = FALSE)
# extract features with occurence b-mean() and b-std()
#  but not meanFreq()
v_features_ms <- grep("\\b-mean()\\b|-std()",features[["V2"]])
## 2. Extracts only the measurements on the mean and standard deviation
## for each measurement.
# extract columnes values with grep
DFX1_sm <-DFX[,grep("\\b-mean()\\b|-std()",features[["V2"]])]
## 3.Uses descriptive activity names to name the activities
## in the data set
# Y contains labels
dftestY <- read.table("../data/UCI HAR Dataset/test/y_test.txt")
dftrainY <- read.table("../data/UCI HAR Dataset/train/y_train.txt")
# appending rows
DFY <- rbind(dftrainY,dftestY)
# append column activity to DFX
DFXY <- cbind(DFX1_sm,DFY)
# name column 67 which contains activity
names(DFXY)[67] <- "activity"
# read table activity names
activity_labels <- read.table("../data/UCI HAR Dataset/activity_labels.txt",
stringsAsFactor = FALSE)
# function return activity label to full description
activity_name <- function(x) {
re <- activity_labels[x,2]
return(re)
}
# replace each cell on column activity by full description
DFXY1 <- transform(DFXY, activity = activity_name(activity))
##4.Appropriately labels the data set with descriptive variable names.
# create vector with all labels
#v_features_ms <- v_features[grep("\\b-mean()\\b|-std()",v_features)]
#v_features <- features[["V2"]]
#v_features_ms <- features[grep("\\b-mean()\\b|-std()",v_features)]
# create vector with all labels
v_features_ms <- features[grep("\\b-mean()\\b|-std()",features$V2),][[2]]
v_features_msa <- (append(v_features_ms,'activity'))
# apply vectores to names
DFXY1 <- setNames (DFXY1, v_features_msa)
## 5.Creates a second, independent tidy data set with the average of
## each variable for each activity and each subject.
dftestU <- read.table("../data/UCI HAR Dataset/test/subject_test.txt")
dftrainU <- read.table("../data/UCI HAR Dataset/train/subject_train.txt")
# appending rows
DFU <- rbind(dftrainU,dftestU)
# append column User to DFX
DFXYU <- cbind(DFU,DFXY1)
# name the new column as volunteers
names(DFXYU)[1] <- "volunteers"
#DFXYU1 <- DFXYU
#DFXYU1$volunteers <- as.character(DFXYU$volunteers)
# aggregate to calculate the average by volunteers and activity
# first column and last col contains volunteers and activity
# so we skip it.
DFXYU1 <- aggregate(DFXYU[2:67],
by = DFXYU[c("volunteers","activity")],
FUN = mean)
# we order result by volunteers number
DFXYU1_volunteers <- DFXYU1[order(DFXYU1$volunteers),]
write.table(DFXYU1_volunteers,
file = "tidydata.txt",
sep = ",",
col.names = colnames(DFXYU1_volunteers))
head(DFXYU1_volunteers , n = 15)
head(DFXYU1_volunteers , n = 15)
rownames(DFXYU1_volunteers) <- NUL
rownames(DFXYU1_volunteers) <- NULL
head(DFXYU1_volunteers , n = 15)
dim(DFXYU1_volunteers)
